// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/protocol.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/protocol.proto

It has these top-level messages:
	RouterRequest
	RouterResponse
	HeartRequest
	HeartResponse
	ListenReq
	StreamRsp
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RouterRequest struct {
	RouterType string `protobuf:"bytes,1,opt,name=routerType" json:"routerType,omitempty"`
	RouterName string `protobuf:"bytes,2,opt,name=routerName" json:"routerName,omitempty"`
	Msg        []byte `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RouterRequest) Reset()                    { *m = RouterRequest{} }
func (m *RouterRequest) String() string            { return proto.CompactTextString(m) }
func (*RouterRequest) ProtoMessage()               {}
func (*RouterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RouterRequest) GetRouterType() string {
	if m != nil {
		return m.RouterType
	}
	return ""
}

func (m *RouterRequest) GetRouterName() string {
	if m != nil {
		return m.RouterName
	}
	return ""
}

func (m *RouterRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type RouterResponse struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
}

func (m *RouterResponse) Reset()                    { *m = RouterResponse{} }
func (m *RouterResponse) String() string            { return proto.CompactTextString(m) }
func (*RouterResponse) ProtoMessage()               {}
func (*RouterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RouterResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type HeartRequest struct {
	RouterType string `protobuf:"bytes,1,opt,name=routerType" json:"routerType,omitempty"`
	ServerName string `protobuf:"bytes,2,opt,name=serverName" json:"serverName,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Ip         string `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	Msg        []byte `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *HeartRequest) Reset()                    { *m = HeartRequest{} }
func (m *HeartRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartRequest) ProtoMessage()               {}
func (*HeartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HeartRequest) GetRouterType() string {
	if m != nil {
		return m.RouterType
	}
	return ""
}

func (m *HeartRequest) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *HeartRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeartRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *HeartRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type HeartResponse struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
}

func (m *HeartResponse) Reset()                    { *m = HeartResponse{} }
func (m *HeartResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartResponse) ProtoMessage()               {}
func (*HeartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HeartResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// The request listen
type ListenReq struct {
	ServerName string `protobuf:"bytes,1,opt,name=serverName" json:"serverName,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Ip         string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
}

func (m *ListenReq) Reset()                    { *m = ListenReq{} }
func (m *ListenReq) String() string            { return proto.CompactTextString(m) }
func (*ListenReq) ProtoMessage()               {}
func (*ListenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListenReq) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *ListenReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListenReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// The stream rsp
type StreamRsp struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *StreamRsp) Reset()                    { *m = StreamRsp{} }
func (m *StreamRsp) String() string            { return proto.CompactTextString(m) }
func (*StreamRsp) ProtoMessage()               {}
func (*StreamRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StreamRsp) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*RouterRequest)(nil), "pb.RouterRequest")
	proto.RegisterType((*RouterResponse)(nil), "pb.RouterResponse")
	proto.RegisterType((*HeartRequest)(nil), "pb.HeartRequest")
	proto.RegisterType((*HeartResponse)(nil), "pb.HeartResponse")
	proto.RegisterType((*ListenReq)(nil), "pb.ListenReq")
	proto.RegisterType((*StreamRsp)(nil), "pb.StreamRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Synchronizer service

type SynchronizerClient interface {
	Router(ctx context.Context, in *RouterRequest, opts ...grpc.CallOption) (*RouterResponse, error)
	Heart(ctx context.Context, in *HeartRequest, opts ...grpc.CallOption) (*HeartResponse, error)
	Listen(ctx context.Context, opts ...grpc.CallOption) (Synchronizer_ListenClient, error)
}

type synchronizerClient struct {
	cc *grpc.ClientConn
}

func NewSynchronizerClient(cc *grpc.ClientConn) SynchronizerClient {
	return &synchronizerClient{cc}
}

func (c *synchronizerClient) Router(ctx context.Context, in *RouterRequest, opts ...grpc.CallOption) (*RouterResponse, error) {
	out := new(RouterResponse)
	err := grpc.Invoke(ctx, "/pb.Synchronizer/router", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerClient) Heart(ctx context.Context, in *HeartRequest, opts ...grpc.CallOption) (*HeartResponse, error) {
	out := new(HeartResponse)
	err := grpc.Invoke(ctx, "/pb.Synchronizer/heart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerClient) Listen(ctx context.Context, opts ...grpc.CallOption) (Synchronizer_ListenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Synchronizer_serviceDesc.Streams[0], c.cc, "/pb.Synchronizer/listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &synchronizerListenClient{stream}
	return x, nil
}

type Synchronizer_ListenClient interface {
	Send(*ListenReq) error
	Recv() (*StreamRsp, error)
	grpc.ClientStream
}

type synchronizerListenClient struct {
	grpc.ClientStream
}

func (x *synchronizerListenClient) Send(m *ListenReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *synchronizerListenClient) Recv() (*StreamRsp, error) {
	m := new(StreamRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Synchronizer service

type SynchronizerServer interface {
	Router(context.Context, *RouterRequest) (*RouterResponse, error)
	Heart(context.Context, *HeartRequest) (*HeartResponse, error)
	Listen(Synchronizer_ListenServer) error
}

func RegisterSynchronizerServer(s *grpc.Server, srv SynchronizerServer) {
	s.RegisterService(&_Synchronizer_serviceDesc, srv)
}

func _Synchronizer_Router_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerServer).Router(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Synchronizer/Router",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerServer).Router(ctx, req.(*RouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synchronizer_Heart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerServer).Heart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Synchronizer/Heart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerServer).Heart(ctx, req.(*HeartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synchronizer_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SynchronizerServer).Listen(&synchronizerListenServer{stream})
}

type Synchronizer_ListenServer interface {
	Send(*StreamRsp) error
	Recv() (*ListenReq, error)
	grpc.ServerStream
}

type synchronizerListenServer struct {
	grpc.ServerStream
}

func (x *synchronizerListenServer) Send(m *StreamRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *synchronizerListenServer) Recv() (*ListenReq, error) {
	m := new(ListenReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Synchronizer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Synchronizer",
	HandlerType: (*SynchronizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "router",
			Handler:    _Synchronizer_Router_Handler,
		},
		{
			MethodName: "heart",
			Handler:    _Synchronizer_Heart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listen",
			Handler:       _Synchronizer_Listen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/protocol.proto",
}

func init() { proto.RegisterFile("pb/protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x97, 0x76, 0x1b, 0xec, 0xb0, 0x8d, 0xed, 0x5c, 0x95, 0x81, 0x32, 0xa2, 0x17, 0xbb,
	0x90, 0xfa, 0xef, 0x25, 0xbc, 0x10, 0x85, 0xcc, 0x17, 0x68, 0xeb, 0xc1, 0x15, 0xd6, 0x26, 0x4b,
	0x32, 0x61, 0x5e, 0xfb, 0x1e, 0xbe, 0xaa, 0x24, 0xb5, 0x7f, 0xa6, 0x28, 0x78, 0xf7, 0xf5, 0xfb,
	0x4a, 0xce, 0xef, 0x3b, 0x09, 0xcc, 0x55, 0x7a, 0xa9, 0xb4, 0xb4, 0x32, 0x93, 0xdb, 0xd8, 0x0b,
	0x0c, 0x54, 0xca, 0x13, 0x98, 0x08, 0xb9, 0xb7, 0xa4, 0x05, 0xed, 0xf6, 0x64, 0x2c, 0x9e, 0x02,
	0x68, 0x6f, 0x3c, 0x1d, 0x14, 0x45, 0x6c, 0xc9, 0x56, 0x23, 0xd1, 0x71, 0xda, 0xfc, 0x21, 0x29,
	0x28, 0x0a, 0xba, 0xb9, 0x73, 0x70, 0x06, 0x61, 0x61, 0x5e, 0xa2, 0x70, 0xc9, 0x56, 0x63, 0xe1,
	0x24, 0x3f, 0x87, 0x69, 0x3d, 0xc2, 0x28, 0x59, 0x1a, 0x42, 0x84, 0x7e, 0x26, 0x9f, 0xeb, 0xd3,
	0xbd, 0xe6, 0xef, 0x0c, 0xc6, 0x77, 0x94, 0x68, 0xfb, 0x0f, 0x10, 0x43, 0xfa, 0xf5, 0x18, 0xa4,
	0x75, 0xdc, 0x90, 0xd2, 0x25, 0x61, 0x35, 0xc4, 0x69, 0x9c, 0x42, 0x90, 0xab, 0xa8, 0xef, 0x9d,
	0x20, 0x57, 0x35, 0xec, 0xa0, 0x85, 0x3d, 0x83, 0xc9, 0x17, 0xc5, 0x1f, 0xac, 0x8f, 0x30, 0xba,
	0xcf, 0x8d, 0xa5, 0x52, 0xd0, 0xee, 0x1b, 0x07, 0xfb, 0x95, 0x23, 0xf8, 0xc1, 0x11, 0xd6, 0x1c,
	0xfc, 0x04, 0x46, 0x6b, 0xab, 0x29, 0x29, 0x84, 0x69, 0xa0, 0x58, 0x03, 0x75, 0xf3, 0xc1, 0x60,
	0xbc, 0x3e, 0x94, 0xd9, 0x46, 0xcb, 0x32, 0x7f, 0x23, 0x8d, 0xd7, 0x30, 0xac, 0x36, 0x81, 0xf3,
	0x58, 0xa5, 0xf1, 0xd1, 0x0d, 0x2e, 0xb0, 0x6b, 0x55, 0x2d, 0x78, 0x0f, 0x63, 0x18, 0x6c, 0x5c,
	0x31, 0x9c, 0xb9, 0xb8, 0xbb, 0xe9, 0xc5, 0xbc, 0xe3, 0x34, 0xff, 0x5f, 0xc0, 0x70, 0xeb, 0x3b,
	0xe2, 0xc4, 0xc5, 0x4d, 0xdf, 0x85, 0xff, 0x6c, 0x68, 0x79, 0x6f, 0xc5, 0xae, 0x58, 0x3a, 0xf4,
	0x2f, 0xea, 0xf6, 0x33, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x48, 0xf9, 0x2a, 0x66, 0x02, 0x00, 0x00,
}
